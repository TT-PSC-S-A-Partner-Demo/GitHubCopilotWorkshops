// Generated by Copilot
// Komponent React do wyszukiwania film√≥w
// Powinien zawieraƒá pole wyszukiwania
// Powinien filtrowaƒá po tytule i re≈ºyserze
// Powinien dzia≈Çaƒá w czasie rzeczywistym
import { useState } from 'react';
import { Movie } from '@/types/Movie';
import './MovieSearch.css';

export interface SearchAndSortOptions {
  searchQuery: string;
  sortBy: 'title' | 'director' | 'releaseDate' | 'ticketPrice';
  sortOrder: 'asc' | 'desc';
}

interface MovieSearchProps {
  movies: Movie[];
  onFilteredMoviesChange: (filteredMovies: Movie[]) => void;
  onOptionsChange?: (options: SearchAndSortOptions) => void;
}

export const MovieSearch: React.FC<MovieSearchProps> = ({
  movies,
  onFilteredMoviesChange,
  onOptionsChange
}) => {
  // Stan opcji wyszukiwania i sortowania
  const [searchOptions, setSearchOptions] = useState<SearchAndSortOptions>({
    searchQuery: '',
    sortBy: 'title',
    sortOrder: 'asc'
  });

  // Funkcja filtrowania film√≥w wed≈Çug zapytania wyszukiwania
  const filterMovies = (movies: Movie[], query: string): Movie[] => {
    if (!query.trim()) {
      return movies;
    }

    const normalizedQuery = query.toLowerCase().trim();
    return movies.filter(movie =>
      movie.title.toLowerCase().includes(normalizedQuery) ||
      movie.director.toLowerCase().includes(normalizedQuery)
    );
  };

  // Funkcja sortowania film√≥w
  const sortMovies = (movies: Movie[], sortBy: string, sortOrder: 'asc' | 'desc'): Movie[] => {
    return [...movies].sort((a, b) => {
      let aValue: string | number;
      let bValue: string | number;

      switch (sortBy) {
        case 'title':
          aValue = a.title.toLowerCase();
          bValue = b.title.toLowerCase();
          break;
        case 'director':
          aValue = a.director.toLowerCase();
          bValue = b.director.toLowerCase();
          break;
        case 'releaseDate':
          aValue = new Date(a.releaseDate).getTime();
          bValue = new Date(b.releaseDate).getTime();
          break;
        case 'ticketPrice':
          aValue = a.ticketPrice;
          bValue = b.ticketPrice;
          break;
        default:
          aValue = a.title.toLowerCase();
          bValue = b.title.toLowerCase();
      }

      if (aValue < bValue) {
        return sortOrder === 'asc' ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortOrder === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  // G≈Ç√≥wna funkcja przetwarzania film√≥w
  const processMovies = (options: SearchAndSortOptions) => {
    // Najpierw filtrujemy
    const filtered = filterMovies(movies, options.searchQuery);
    // Potem sortujemy
    const processed = sortMovies(filtered, options.sortBy, options.sortOrder);
    
    onFilteredMoviesChange(processed);
    onOptionsChange?.(options);
  };

  // Obs≈Çuga zmiany zapytania wyszukiwania
  const handleSearchChange = (query: string) => {
    const newOptions = { ...searchOptions, searchQuery: query };
    setSearchOptions(newOptions);
    processMovies(newOptions);
  };

  // Obs≈Çuga zmiany opcji sortowania
  const handleSortChange = (sortBy: SearchAndSortOptions['sortBy']) => {
    const newOptions = { ...searchOptions, sortBy };
    setSearchOptions(newOptions);
    processMovies(newOptions);
  };

  // Obs≈Çuga zmiany kierunku sortowania
  const handleSortOrderChange = () => {
    const newSortOrder: 'asc' | 'desc' = searchOptions.sortOrder === 'asc' ? 'desc' : 'asc';
    const newOptions = { ...searchOptions, sortOrder: newSortOrder };
    setSearchOptions(newOptions);
    processMovies(newOptions);
  };

  // Funkcja resetowania filtr√≥w
  const handleResetFilters = () => {
    const resetOptions: SearchAndSortOptions = {
      searchQuery: '',
      sortBy: 'title',
      sortOrder: 'asc'
    };
    setSearchOptions(resetOptions);
    processMovies(resetOptions);
  };

  // Statystyki wyszukiwania
  const filteredCount = filterMovies(movies, searchOptions.searchQuery).length;
  const totalCount = movies.length;

  return (
    <div className="movie-search-container">
      <div className="search-header">
        <h3>üîç Wyszukiwanie i sortowanie</h3>
        <p>Znajd≈∫ filmy wed≈Çug tytu≈Çu lub re≈ºysera</p>
      </div>

      <div className="search-controls">
        {/* Pole wyszukiwania */}
        <div className="search-input-group">
          <div className="search-input-wrapper">
            <input
              type="text"
              placeholder="Wyszukaj film lub re≈ºysera..."
              value={searchOptions.searchQuery}
              onChange={(e) => handleSearchChange(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
            {searchOptions.searchQuery && (
              <button
                onClick={() => handleSearchChange('')}
                className="clear-search-button"
                title="Wyczy≈õƒá wyszukiwanie"
              >
                ‚ùå
              </button>
            )}
          </div>
        </div>

        {/* Opcje sortowania */}
        <div className="sort-controls">
          <div className="sort-by-group">
            <label htmlFor="sortBy">Sortuj wed≈Çug:</label>
            <select
              id="sortBy"
              value={searchOptions.sortBy}
              onChange={(e) => handleSortChange(e.target.value as SearchAndSortOptions['sortBy'])}
              className="sort-select"
            >
              <option value="title">üìù Tytu≈Çu</option>
              <option value="director">üé¨ Re≈ºysera</option>
              <option value="releaseDate">üìÖ Daty wydania</option>
              <option value="ticketPrice">üí∞ Ceny</option>
            </select>
          </div>

          <button
            onClick={handleSortOrderChange}
            className="sort-order-button"
            title={`Sortowanie ${searchOptions.sortOrder === 'asc' ? 'rosnƒÖco' : 'malejƒÖco'}`}
          >
            {searchOptions.sortOrder === 'asc' ? '‚¨ÜÔ∏è RosnƒÖco' : '‚¨áÔ∏è MalejƒÖco'}
          </button>
        </div>

        {/* Przycisk resetowania */}
        <button
          onClick={handleResetFilters}
          className="reset-filters-button"
          title="Resetuj wszystkie filtry"
        >
          üîÑ Resetuj
        </button>
      </div>

      {/* Statystyki wyszukiwania */}
      <div className="search-stats">
        {searchOptions.searchQuery ? (
          <p>
            Znaleziono <strong>{filteredCount}</strong> z <strong>{totalCount}</strong> film√≥w
            {filteredCount === 0 && ' üòû'}
            {filteredCount > 0 && filteredCount === totalCount && ' üéâ'}
          </p>
        ) : (
          <p>
            Wy≈õwietlono <strong>{totalCount}</strong> {totalCount === 1 ? 'film' : 'film√≥w'}
          </p>
        )}
      </div>

      {/* Komunikat o braku wynik√≥w */}
      {searchOptions.searchQuery && filteredCount === 0 && (
        <div className="no-results-message">
          <h4>ü§∑‚Äç‚ôÇÔ∏è Brak wynik√≥w</h4>
          <p>
            Nie znaleziono film√≥w zawierajƒÖcych "<strong>{searchOptions.searchQuery}</strong>" w tytule lub nazwisku re≈ºysera.
          </p>
          <button onClick={() => handleSearchChange('')} className="show-all-button">
            üìã Poka≈º wszystkie filmy
          </button>
        </div>
      )}
    </div>
  );
};