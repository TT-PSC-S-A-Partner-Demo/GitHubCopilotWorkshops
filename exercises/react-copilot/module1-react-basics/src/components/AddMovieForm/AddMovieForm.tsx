// Generated by Copilot
// Formularz React do dodawania nowego filmu
// Powinien zawieraƒá pola: title, director, ticketPrice, releaseDate
// Powinien validowaƒá wszystkie pola przed submitem
// Powinien u≈ºywaƒá useState do zarzƒÖdzania stanem formularza
// Powinien wywo≈Çaƒá callback onSubmit z danymi filmu
import { useState } from 'react';
import { CreateMovieData } from '@/types/Movie';
import './AddMovieForm.css';

interface AddMovieFormProps {
  onSubmit: (movieData: CreateMovieData) => Promise<void>;
  onCancel?: () => void;
  isLoading?: boolean;
}

interface FormErrors {
  title?: string;
  director?: string;
  ticketPrice?: string;
  releaseDate?: string;
}

export const AddMovieForm: React.FC<AddMovieFormProps> = ({
  onSubmit,
  onCancel,
  isLoading = false
}) => {
  // Formularz React z kontrolowanymi komponentami
  const [formData, setFormData] = useState<CreateMovieData>({
    title: '',
    director: '',
    ticketPrice: 0,
    releaseDate: ''
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Walidacja formularza przed submitem
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // Walidacja tytu≈Çu
    if (!formData.title.trim()) {
      newErrors.title = 'Tytu≈Ç filmu jest wymagany';
    } else if (formData.title.trim().length < 2) {
      newErrors.title = 'Tytu≈Ç musi mieƒá co najmniej 2 znaki';
    }

    // Walidacja re≈ºysera
    if (!formData.director.trim()) {
      newErrors.director = 'Re≈ºyser jest wymagany';
    } else if (formData.director.trim().length < 2) {
      newErrors.director = 'Imiƒô re≈ºysera musi mieƒá co najmniej 2 znaki';
    }

    // Walidacja ceny
    if (formData.ticketPrice <= 0) {
      newErrors.ticketPrice = 'Cena musi byƒá wiƒôksza od 0';
    } else if (formData.ticketPrice > 1000) {
      newErrors.ticketPrice = 'Cena nie mo≈ºe przekraczaƒá 1000 PLN';
    }

    // Walidacja daty wydania
    if (!formData.releaseDate) {
      newErrors.releaseDate = 'Data wydania jest wymagana';
    } else {
      const selectedDate = new Date(formData.releaseDate);
      const today = new Date();
      const minDate = new Date('1900-01-01');
      
      if (selectedDate > today) {
        newErrors.releaseDate = 'Data wydania nie mo≈ºe byƒá z przysz≈Ço≈õci';
      } else if (selectedDate < minDate) {
        newErrors.releaseDate = 'Data wydania nie mo≈ºe byƒá wcze≈õniejsza ni≈º 1900 rok';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Obs≈Çuga zmiany warto≈õci w polach formularza
  const handleInputChange = (field: keyof CreateMovieData, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Usuniƒôcie b≈Çƒôdu dla tego pola po zmianie warto≈õci
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }
  };

  // Obs≈Çuga submitu formularza
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    
    try {
      await onSubmit(formData);
      // Reset formularza po udanym dodaniu
      handleReset();
    } catch (error) {
      console.error('B≈ÇƒÖd podczas dodawania filmu:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Reset formularza
  const handleReset = () => {
    setFormData({
      title: '',
      director: '',
      ticketPrice: 0,
      releaseDate: ''
    });
    setErrors({});
  };

  const isFormDisabled = isLoading || isSubmitting;

  return (
    <div className="add-movie-form-container">
      <form className="add-movie-form" onSubmit={handleSubmit}>
        <header className="form-header">
          <h2>üé¨ Dodaj nowy film</h2>
          <p>Wype≈Çnij wszystkie pola, aby dodaƒá film do kolekcji</p>
        </header>

        <div className="form-fields">
          {/* Pole tytu≈Çu */}
          <div className="form-field">
            <label htmlFor="title">
              Tytu≈Ç filmu <span className="required">*</span>
            </label>
            <input
              id="title"
              type="text"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              className={errors.title ? 'error' : ''}
              placeholder="np. Kr√≥l Lew"
              disabled={isFormDisabled}
              maxLength={100}
            />
            {errors.title && <span className="error-message">{errors.title}</span>}
          </div>

          {/* Pole re≈ºysera */}
          <div className="form-field">
            <label htmlFor="director">
              Re≈ºyser <span className="required">*</span>
            </label>
            <input
              id="director"
              type="text"
              value={formData.director}
              onChange={(e) => handleInputChange('director', e.target.value)}
              className={errors.director ? 'error' : ''}
              placeholder="np. Steven Spielberg"
              disabled={isFormDisabled}
              maxLength={50}
            />
            {errors.director && <span className="error-message">{errors.director}</span>}
          </div>

          {/* Pole ceny biletu */}
          <div className="form-field">
            <label htmlFor="ticketPrice">
              Cena biletu (PLN) <span className="required">*</span>
            </label>
            <input
              id="ticketPrice"
              type="number"
              value={formData.ticketPrice || ''}
              onChange={(e) => handleInputChange('ticketPrice', parseFloat(e.target.value) || 0)}
              className={errors.ticketPrice ? 'error' : ''}
              placeholder="25.99"
              disabled={isFormDisabled}
              min="0.01"
              max="1000"
              step="0.01"
            />
            {errors.ticketPrice && <span className="error-message">{errors.ticketPrice}</span>}
          </div>

          {/* Pole daty wydania */}
          <div className="form-field">
            <label htmlFor="releaseDate">
              Data wydania <span className="required">*</span>
            </label>
            <input
              id="releaseDate"
              type="date"
              value={formData.releaseDate}
              onChange={(e) => handleInputChange('releaseDate', e.target.value)}
              className={errors.releaseDate ? 'error' : ''}
              disabled={isFormDisabled}
              min="1900-01-01"
              max={new Date().toISOString().split('T')[0]}
            />
            {errors.releaseDate && <span className="error-message">{errors.releaseDate}</span>}
          </div>
        </div>

        <div className="form-actions">
          <button
            type="button"
            onClick={handleReset}
            className="reset-button"
            disabled={isFormDisabled}
          >
            üîÑ Wyczy≈õƒá formularz
          </button>
          
          {onCancel && (
            <button
              type="button"
              onClick={onCancel}
              className="cancel-button"
              disabled={isFormDisabled}
            >
              ‚ùå Anuluj
            </button>
          )}
          
          <button
            type="submit"
            className="submit-button"
            disabled={isFormDisabled}
          >
            {isSubmitting ? '‚è≥ Dodawanie...' : '‚úÖ Dodaj film'}
          </button>
        </div>
      </form>
    </div>
  );
};