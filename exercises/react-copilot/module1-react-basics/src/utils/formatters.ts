// Generated by Copilot
// Utility functions for formatting dates and currency in Polish locale
// Funkcje pomocnicze do formatowania dat i waluty w polskim formacie

/**
 * Formatuje cenƒô w polskiej walucie (PLN)
 */
export const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('pl-PL', {
    style: 'currency',
    currency: 'PLN',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(amount);
};

/**
 * Formatuje datƒô w d≈Çugim polskim formacie
 */
export const formatDateLong = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('pl-PL', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

/**
 * Formatuje datƒô w kr√≥tkim polskim formacie
 */
export const formatDateShort = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('pl-PL');
};

/**
 * Oblicza wiek filmu od daty premiery
 */
export const calculateMovieAge = (dateString: string): string => {
  const releaseDate = new Date(dateString);
  const today = new Date();
  const diffTime = Math.abs(today.getTime() - releaseDate.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays < 7) {
    return `${diffDays} ${diffDays === 1 ? 'dzie≈Ñ' : 'dni'} temu`;
  } else if (diffDays < 30) {
    const weeks = Math.floor(diffDays / 7);
    return `${weeks} ${weeks === 1 ? 'tydzie≈Ñ' : 'tygodni'} temu`;
  } else if (diffDays < 365) {
    const months = Math.floor(diffDays / 30);
    return `${months} ${months === 1 ? 'miesiƒÖc' : months < 5 ? 'miesiƒÖce' : 'miesiƒôcy'} temu`;
  } else {
    const years = Math.floor(diffDays / 365);
    return `${years} ${years === 1 ? 'rok' : years < 5 ? 'lata' : 'lat'} temu`;
  }
};

/**
 * Kategoryzuje cenƒô biletu
 */
export const getPriceCategory = (price: number): { label: string; className: string; description: string } => {
  if (price < 20) {
    return { 
      label: 'Bud≈ºetowy', 
      className: 'budget',
      description: '≈öwietna cena za dobry film'
    };
  } else if (price < 30) {
    return { 
      label: 'Standardowy', 
      className: 'standard',
      description: 'Standardowa cena kinowa'
    };
  } else {
    return { 
      label: 'Premium', 
      className: 'premium',
      description: 'Ekskluzywne do≈õwiadczenie filmowe'
    };
  }
};

/**
 * Sprawdza czy film jest nowy (wydany w ciƒÖgu ostatnich 30 dni)
 */
export const isNewMovie = (dateString: string): boolean => {
  const releaseDate = new Date(dateString);
  const today = new Date();
  const diffTime = today.getTime() - releaseDate.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  return diffDays <= 30 && diffDays >= 0;
};

/**
 * Formatuje tytu≈Ç filmu z odpowiednimi emotikonami na podstawie kategorii
 */
export const formatMovieTitle = (title: string, price: number): string => {
  const category = getPriceCategory(price);
  const emoji = category.className === 'premium' ? '‚≠ê' : 
               category.className === 'standard' ? 'üé¨' : 'üí∞';
  
  return `${emoji} ${title}`;
};