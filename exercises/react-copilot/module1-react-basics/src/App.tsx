// Generated by Copilot
// Main App component for Module 1: React Basics - Final Integration
// Kompletna aplikacja do zarządzania filmami z pełną funkcjonalnością
import { useState, useEffect } from 'react';
import { Movie, CreateMovieData } from '@/types/Movie';
import { MovieList, MovieDetail, AddMovieForm, MovieSearch, SearchAndSortOptions } from '@/components';
import { useMovies } from '@/hooks';

function App() {
  // Stan wybranego filmu i widoku
  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);
  const [currentView, setCurrentView] = useState<'list' | 'detail' | 'add'>('list');
  
  // Stan dla przefiltrowanych filmów
  const [filteredMovies, setFilteredMovies] = useState<Movie[]>([]);
  const [searchOptions, setSearchOptions] = useState<SearchAndSortOptions | null>(null);
  
  // Stan dla powiadomień i UX
  const [notification, setNotification] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
  } | null>(null);
  const [isTransitioning, setIsTransitioning] = useState(false);

  // Użycie custom hook do zarządzania filmami
  const { 
    movies, 
    loading, 
    error, 
    refreshMovies,
    addMovie 
  } = useMovies();

  // Funkcja pokazywania powiadomień
  const showNotification = (message: string, type: 'success' | 'error' | 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 4000); // Auto-hide po 4 sekundach
  };

  // Funkcja obsługi kliknięcia w film z płynnym przejściem
  const handleMovieClick = (movie: Movie) => {
    setIsTransitioning(true);
    setTimeout(() => {
      setSelectedMovie(movie);
      setCurrentView('detail');
      setIsTransitioning(false);
    }, 150);
  };

  // Funkcja powrotu do listy z płynnym przejściem
  const handleBackToList = () => {
    setIsTransitioning(true);
    setTimeout(() => {
      setCurrentView('list');
      setSelectedMovie(null);
      setIsTransitioning(false);
    }, 150);
  };

  // Funkcja przejścia do formularza dodawania filmu
  const handleShowAddForm = () => {
    setIsTransitioning(true);
    setTimeout(() => {
      setCurrentView('add');
      setSelectedMovie(null);
      setIsTransitioning(false);
    }, 150);
  };

  // Funkcja obsługi dodawania nowego filmu z powiadomieniem
  const handleAddMovie = async (movieData: CreateMovieData) => {
    try {
      await addMovie(movieData);
      showNotification(`✅ Film "${movieData.title}" został dodany pomyślnie!`, 'success');
      setCurrentView('list'); // Powrót do listy po dodaniu
    } catch (error) {
      showNotification(`❌ Błąd podczas dodawania filmu: ${error}`, 'error');
    }
  };

  // Funkcje obsługi wyszukiwania i filtrowania
  const handleFilteredMoviesChange = (filtered: Movie[]) => {
    setFilteredMovies(filtered);
  };

  const handleSearchOptionsChange = (options: SearchAndSortOptions) => {
    setSearchOptions(options);
  };

  // Inicjalizacja przefiltrowanych filmów przy pierwszym załadowaniu
  useEffect(() => {
    if (movies.length > 0 && filteredMovies.length === 0 && !searchOptions?.searchQuery) {
      setFilteredMovies(movies);
    }
  }, [movies, filteredMovies.length, searchOptions?.searchQuery]);

  // Określenie, które filmy wyświetlić
  const moviesToDisplay = filteredMovies.length > 0 || searchOptions?.searchQuery 
    ? filteredMovies 
    : movies;

  // Funkcja określająca tytuł strony na podstawie aktualnego widoku
  const getPageTitle = () => {
    switch (currentView) {
      case 'detail':
        return selectedMovie ? `🎬 ${selectedMovie.title}` : '🎬 Szczegóły filmu';
      case 'add':
        return '➕ Dodaj nowy film';
      default:
        return '🎬 Kolekcja filmów';
    }
  };

  // Statystyki aplikacji
  const appStats = {
    totalMovies: movies.length,
    filteredMovies: moviesToDisplay.length,
    hasActiveSearch: Boolean(searchOptions?.searchQuery),
    currentSort: searchOptions?.sortBy || 'title'
  };

  return (
    <div className={`app ${isTransitioning ? 'transitioning' : ''}`}>
      {/* Notification Toast */}
      {notification && (
        <div className={`notification notification-${notification.type}`}>
          <span>{notification.message}</span>
          <button 
            onClick={() => setNotification(null)}
            className="notification-close"
          >
            ✕
          </button>
        </div>
      )}

      <header className="app-header">
        <div className="header-content">
          <h1>{getPageTitle()}</h1>
          <p>Module 1: React Basics - Kompletna aplikacja filmowa</p>
          
          {/* App Statistics */}
          <div className="app-stats">
            <span className="stat">
              📊 {appStats.totalMovies} {appStats.totalMovies === 1 ? 'film' : 'filmów'}
            </span>
            {appStats.hasActiveSearch && (
              <span className="stat">
                🔍 {appStats.filteredMovies} wyników
              </span>
            )}
            <span className="stat">
              📈 Sortowanie: {appStats.currentSort}
            </span>
          </div>
        </div>
        
        <nav className="app-navigation">
          {currentView === 'list' ? (
            <button 
              className="add-movie-button"
              onClick={handleShowAddForm}
              disabled={loading}
            >
              ➕ Dodaj nowy film
            </button>
          ) : (
            <button 
              className="back-button"
              onClick={handleBackToList}
            >
              ← Powrót do listy filmów
            </button>
          )}
        </nav>
      </header>
      
      <main className="app-main">
        {currentView === 'list' ? (
          <section className="movie-section">
            {loading ? (
              <div className="loading-state">
                <h2>⏳ Ładowanie filmów...</h2>
                <p>Proszę czekać, pobieramy dane o filmach.</p>
              </div>
            ) : error ? (
              <div className="error-state">
                <h2>❌ Wystąpił błąd</h2>
                <p>{error}</p>
                <button 
                  className="refresh-button"
                  onClick={refreshMovies}
                >
                  🔄 Spróbuj ponownie
                </button>
              </div>
            ) : (
              <>
                <MovieSearch
                  movies={movies}
                  onFilteredMoviesChange={handleFilteredMoviesChange}
                  onOptionsChange={handleSearchOptionsChange}
                />
                <MovieList 
                  movies={moviesToDisplay}
                  onMovieClick={handleMovieClick}
                />
              </>
            )}
          </section>
        ) : currentView === 'detail' ? (
          <section className="movie-detail-section">
            <MovieDetail movie={selectedMovie} />
          </section>
        ) : currentView === 'add' ? (
          <section className="add-movie-section">
            <AddMovieForm 
              onSubmit={handleAddMovie}
              onCancel={handleBackToList}
              isLoading={loading}
            />
          </section>
        ) : null}
      </main>

      {/* App Footer */}
      <footer className="app-footer">
        <div className="footer-content">
          <div className="footer-section">
            <h4>🎬 Movie Management App</h4>
            <p>Kompletna aplikacja do zarządzania kolekcją filmów</p>
          </div>
          
          <div className="footer-section">
            <h4>🚀 Funkcje</h4>
            <ul>
              <li>✅ Przeglądanie filmów</li>
              <li>✅ Szczegółowe informacje</li>
              <li>✅ Dodawanie nowych filmów</li>
              <li>✅ Wyszukiwanie i sortowanie</li>
            </ul>
          </div>
          
          <div className="footer-section">
            <h4>🛠️ Technologie</h4>
            <ul>
              <li>React 18 + TypeScript</li>
              <li>GitHub Copilot</li>
              <li>Vite Build Tool</li>
              <li>CSS3 + Responsive Design</li>
            </ul>
          </div>
        </div>
        
        <div className="footer-bottom">
          <p>© 2025 Movie Management App • Stworzone z ❤️ i GitHub Copilot</p>
          <p>Module 1: React Basics - Phase 8 Complete! 🎉</p>
        </div>
      </footer>
    </div>
  );
}

export default App;