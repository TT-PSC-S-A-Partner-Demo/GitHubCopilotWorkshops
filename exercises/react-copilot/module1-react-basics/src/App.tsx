// Generated by Copilot
// Main App component for Module 1: React Basics
// Podstawowy komponent aplikacji do zarzƒÖdzania filmami
import { useState } from 'react';
import { Movie, CreateMovieData } from '@/types/Movie';
import { MovieList, MovieDetail, AddMovieForm, MovieSearch, SearchAndSortOptions } from '@/components';
import { useMovies } from '@/hooks';

function App() {
  // Stan wybranego filmu i widoku
  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);
  const [currentView, setCurrentView] = useState<'list' | 'detail' | 'add'>('list');
  
  // Stan dla przefiltrowanych film√≥w
  const [filteredMovies, setFilteredMovies] = useState<Movie[]>([]);
  const [searchOptions, setSearchOptions] = useState<SearchAndSortOptions | null>(null);

  // U≈ºycie custom hook do zarzƒÖdzania filmami
  const { 
    movies, 
    loading, 
    error, 
    refreshMovies,
    addMovie 
  } = useMovies();

  // Funkcja obs≈Çugi klikniƒôcia w film
  const handleMovieClick = (movie: Movie) => {
    setSelectedMovie(movie);
    setCurrentView('detail');
  };

  // Funkcja powrotu do listy
  const handleBackToList = () => {
    setCurrentView('list');
    setSelectedMovie(null);
  };

  // Funkcja przej≈õcia do formularza dodawania filmu
  const handleShowAddForm = () => {
    setCurrentView('add');
    setSelectedMovie(null);
  };

  // Funkcja obs≈Çugi dodawania nowego filmu
  const handleAddMovie = async (movieData: CreateMovieData) => {
    await addMovie(movieData);
    setCurrentView('list'); // Powr√≥t do listy po dodaniu
  };

  // Funkcje obs≈Çugi wyszukiwania i filtrowania
  const handleFilteredMoviesChange = (filtered: Movie[]) => {
    setFilteredMovies(filtered);
  };

  const handleSearchOptionsChange = (options: SearchAndSortOptions) => {
    setSearchOptions(options);
  };

  // Okre≈õlenie, kt√≥re filmy wy≈õwietliƒá
  const moviesToDisplay = filteredMovies.length > 0 || searchOptions?.searchQuery 
    ? filteredMovies 
    : movies;

  return (
    <div className="app">
      <header className="app-header">
        <h1>üé¨ Movie Management App</h1>
        <p>Module 1: React Basics with GitHub Copilot</p>
        
        <nav className="app-navigation">
          {currentView === 'list' ? (
            <button 
              className="add-movie-button"
              onClick={handleShowAddForm}
              disabled={loading}
            >
              ‚ûï Dodaj nowy film
            </button>
          ) : (
            <button 
              className="back-button"
              onClick={handleBackToList}
            >
              ‚Üê Powr√≥t do listy film√≥w
            </button>
          )}
        </nav>
      </header>
      
      <main className="app-main">
        {currentView === 'list' ? (
          <section className="movie-section">
            {loading ? (
              <div className="loading-state">
                <h2>‚è≥ ≈Åadowanie film√≥w...</h2>
                <p>Proszƒô czekaƒá, pobieramy dane o filmach.</p>
              </div>
            ) : error ? (
              <div className="error-state">
                <h2>‚ùå WystƒÖpi≈Ç b≈ÇƒÖd</h2>
                <p>{error}</p>
                <button 
                  className="refresh-button"
                  onClick={refreshMovies}
                >
                  üîÑ Spr√≥buj ponownie
                </button>
              </div>
            ) : (
              <>
                <MovieSearch
                  movies={movies}
                  onFilteredMoviesChange={handleFilteredMoviesChange}
                  onOptionsChange={handleSearchOptionsChange}
                />
                <MovieList 
                  movies={moviesToDisplay}
                  onMovieClick={handleMovieClick}
                />
              </>
            )}
          </section>
        ) : currentView === 'detail' ? (
          <section className="movie-detail-section">
            <MovieDetail movie={selectedMovie} />
          </section>
        ) : currentView === 'add' ? (
          <section className="add-movie-section">
            <AddMovieForm 
              onSubmit={handleAddMovie}
              onCancel={handleBackToList}
              isLoading={loading}
            />
          </section>
        ) : null}
      </main>
    </div>
  );
}

export default App;